generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(cuid())
  firstName   String
  lastName    String?
  email       String  @unique
  clerkUserId String  @unique
  imageUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  completedLessons CompletedLesson[]

  @@map("users")
}

model CourseTag {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course? @relation(fields: [courseId], references: [id])
  courseId String?

  @@map("course_tags")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
}

enum CourseDifficulty {
  EASY
  MEDIUM
  HARD
}

model Course {
  id String @id @default(cuid())

  status CourseStatus @default(DRAFT)

  title            String
  slug             String           @unique
  description      String
  shortDescription String?
  thumbnail        String
  price            Float
  discountPrice    Float?
  tags             CourseTag[]
  difficulty       CourseDifficulty @default(EASY)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  modules          CourseModule[]
  completedLessons CompletedLesson[]

  @@map("courses")
}

model CourseModule {
  id String @id @default(cuid())

  title       String
  description String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  order Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessons CourseLesson[]

  @@map("course_modules")
}

model CourseLesson {
  id String @id @default(cuid())

  title        String
  description  String
  videoId      String
  durationInMs Int

  order Int

  moduleId String
  module   CourseModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  completedLessons CompletedLesson[]

  @@map("course_lessons")
}

model CompletedLesson {
  id String @id @default(cuid())

  lessonId String
  lesson   CourseLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("completed_lessons")
}
